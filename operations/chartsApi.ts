/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/chartsApiMappers";
import * as Parameters from "../models/parameters";
import { TeamOrgChartApiContext } from "../teamOrgChartApiContext";

/** Class representing a ChartsApi. */
export class ChartsApi {
  private readonly client: TeamOrgChartApiContext;

  /**
   * Create a ChartsApi.
   * @param {TeamOrgChartApiContext} client Reference to the service client.
   */
  constructor(client: TeamOrgChartApiContext) {
    this.client = client;
  }

  /**
   * <br />
   * GET /api/v1/charts
   * @summary Retrieve a collection organization chart definitions owned by this tenant.
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartsApiGetResponse>
   */
  get(version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartsApiGetResponse>;
  /**
   * @param version
   * @param callback The callback
   */
  get(version: string, callback: msRest.ServiceCallback<Models.ChartDefinition[]>): void;
  /**
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  get(version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChartDefinition[]>): void;
  get(version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChartDefinition[]>, callback?: msRest.ServiceCallback<Models.ChartDefinition[]>): Promise<Models.ChartsApiGetResponse> {
    return this.client.sendOperationRequest(
      {
        version,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ChartsApiGetResponse>;
  }

  /**
   * <br />
   * POST /api/v1/charts/
   * @summary Create a new organization chart definition within the tenant.
   * @param model organization chart definition
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartsApiCreateChartResponse>
   */
  createChart(model: Models.CreateChartModel, version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartsApiCreateChartResponse>;
  /**
   * @param model organization chart definition
   * @param version
   * @param callback The callback
   */
  createChart(model: Models.CreateChartModel, version: string, callback: msRest.ServiceCallback<Models.ChartDefinition>): void;
  /**
   * @param model organization chart definition
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  createChart(model: Models.CreateChartModel, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChartDefinition>): void;
  createChart(model: Models.CreateChartModel, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChartDefinition>, callback?: msRest.ServiceCallback<Models.ChartDefinition>): Promise<Models.ChartsApiCreateChartResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        version,
        options
      },
      createChartOperationSpec,
      callback) as Promise<Models.ChartsApiCreateChartResponse>;
  }

  /**
   * <br />
   * GET /api/v1/charts/53bec490-1cdc-42f5-8983-e6efe66dc685
   * @summary Retrieve an organization chart definition owned by this tenant.
   * @param chartId ID of the chart definition
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartsApiGet1Response>
   */
  get1(chartId: string, version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartsApiGet1Response>;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param callback The callback
   */
  get1(chartId: string, version: string, callback: msRest.ServiceCallback<Models.ChartDefinition>): void;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  get1(chartId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChartDefinition>): void;
  get1(chartId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChartDefinition>, callback?: msRest.ServiceCallback<Models.ChartDefinition>): Promise<Models.ChartsApiGet1Response> {
    return this.client.sendOperationRequest(
      {
        chartId,
        version,
        options
      },
      get1OperationSpec,
      callback) as Promise<Models.ChartsApiGet1Response>;
  }

  /**
   * <br />
   * DELETE /api/v1/charts/53bec490-1cdc-42f5-8983-e6efe66dc685
   * @summary Delete an organization chart definition owned by this tenant.
   * @param chartId ID of the chart definition
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(chartId: string, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param callback The callback
   */
  deleteMethod(chartId: string, version: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(chartId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(chartId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        version,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/charts",
  urlParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChartDefinition"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createChartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v{version}/charts",
  urlParameters: [
    Parameters.version
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.CreateChartModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ChartDefinition
    },
    default: {}
  },
  serializer
};

const get1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/charts/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChartDefinition
    },
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v{version}/charts/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  responses: {
    200: {},
    400: {},
    default: {}
  },
  serializer
};
