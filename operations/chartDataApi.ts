/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/chartDataApiMappers";
import * as Parameters from "../models/parameters";
import { TeamOrgChartApiContext } from "../teamOrgChartApiContext";

/** Class representing a ChartDataApi. */
export class ChartDataApi {
  private readonly client: TeamOrgChartApiContext;

  /**
   * Create a ChartDataApi.
   * @param {TeamOrgChartApiContext} client Reference to the service client.
   */
  constructor(client: TeamOrgChartApiContext) {
    this.client = client;
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * Sample request:
   *
   * GET /api/v1/data/53bec490-1cdc-42f5-8983-e6efe66dc685
   * @summary Fetches all the items in the organization chart.
   * @param chartId Id of chart
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartDataApiGetChartItemsResponse>
   */
  getChartItems(chartId: string, version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartDataApiGetChartItemsResponse>;
  /**
   * @param chartId Id of chart
   * @param version
   * @param callback The callback
   */
  getChartItems(chartId: string, version: string, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): void;
  /**
   * @param chartId Id of chart
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getChartItems(chartId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): void;
  getChartItems(chartId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JsonChartItemViewModel[]>, callback?: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): Promise<Models.ChartDataApiGetChartItemsResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        version,
        options
      },
      getChartItemsOperationSpec,
      callback) as Promise<Models.ChartDataApiGetChartItemsResponse>;
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * The data must contain a <b>Unqiue Id</b> and <b>Manager Id</b> other can be added as required
   * for example <b>DisplayName</b> or <b>Email</b>
   * Sample request:
   *
   * POST /api/v1/data/53bec490-1cdc-42f5-8983-e6efe66dc685/
   * [{
   * "UniqueId": "2",
   * "ManagerId": "1",
   * "DisplayName": "Mike Smith",
   * "Title": "CTO"
   * }]
   * @summary Creates a single chart item in an organization chart.
   * @param chartId Id of the chart in which the item will be created
   * @param model JSON model of the item to be created.
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartDataApiCreateChartItemResponse>
   */
  createChartItem(chartId: string, model: any, version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartDataApiCreateChartItemResponse>;
  /**
   * @param chartId Id of the chart in which the item will be created
   * @param model JSON model of the item to be created.
   * @param version
   * @param callback The callback
   */
  createChartItem(chartId: string, model: any, version: string, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel>): void;
  /**
   * @param chartId Id of the chart in which the item will be created
   * @param model JSON model of the item to be created.
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  createChartItem(chartId: string, model: any, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel>): void;
  createChartItem(chartId: string, model: any, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JsonChartItemViewModel>, callback?: msRest.ServiceCallback<Models.JsonChartItemViewModel>): Promise<Models.ChartDataApiCreateChartItemResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        model,
        version,
        options
      },
      createChartItemOperationSpec,
      callback) as Promise<Models.ChartDataApiCreateChartItemResponse>;
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * Sample request:
   *
   * DELETE /api/v1/data/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=111-222
   * @summary Delete a chart item from an organization chart
   * @param chartId Id of chart that contains the item
   * @param uniqueId Id of the item to remove from the chart
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteChartItem(chartId: string, uniqueId: string, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param chartId Id of chart that contains the item
   * @param uniqueId Id of the item to remove from the chart
   * @param version
   * @param callback The callback
   */
  deleteChartItem(chartId: string, uniqueId: string, version: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param chartId Id of chart that contains the item
   * @param uniqueId Id of the item to remove from the chart
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteChartItem(chartId: string, uniqueId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteChartItem(chartId: string, uniqueId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        uniqueId,
        version,
        options
      },
      deleteChartItemOperationSpec,
      callback);
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * Sample request:
   *
   * POST /api/v1/data/53bec490-1cdc-42f5-8983-e6efe66dc685/bulk
   * [{
   * "UniqueId": "2",
   * "ManagerId": "1",
   * "DisplayName": "Mike Smith",
   * "Title": "CTO"
   * },
   * {
   * "UniqueId": "3",
   * "ManagerId": "1",
   * "DisplayName": "Jane Doe",
   * "Title": "CFO"
   * }]
   * @summary Uploads a list of chart items and creates them within the chart.
   * @param chartId Id of the chart in the item will be created
   * @param items List of item objects
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartDataApiCreateChartItemsResponse>
   */
  createChartItems(chartId: string, items: any[], version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartDataApiCreateChartItemsResponse>;
  /**
   * @param chartId Id of the chart in the item will be created
   * @param items List of item objects
   * @param version
   * @param callback The callback
   */
  createChartItems(chartId: string, items: any[], version: string, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): void;
  /**
   * @param chartId Id of the chart in the item will be created
   * @param items List of item objects
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  createChartItems(chartId: string, items: any[], version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): void;
  createChartItems(chartId: string, items: any[], version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JsonChartItemViewModel[]>, callback?: msRest.ServiceCallback<Models.JsonChartItemViewModel[]>): Promise<Models.ChartDataApiCreateChartItemsResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        items,
        version,
        options
      },
      createChartItemsOperationSpec,
      callback) as Promise<Models.ChartDataApiCreateChartItemsResponse>;
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * Sample request:
   *
   * GET /api/v1/data/53bec490-1cdc-42f5-8983-e6efe66dc685?uniqueId=111-222
   * @summary Fetches a single chart item from the organization chart.
   * @param chartId Id of chart which the item belongs to
   * @param uniqueId Id of the item to return
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartDataApiGetChartItemResponse>
   */
  getChartItem(chartId: string, uniqueId: string, version: string, options?: msRest.RequestOptionsBase): Promise<Models.ChartDataApiGetChartItemResponse>;
  /**
   * @param chartId Id of chart which the item belongs to
   * @param uniqueId Id of the item to return
   * @param version
   * @param callback The callback
   */
  getChartItem(chartId: string, uniqueId: string, version: string, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel>): void;
  /**
   * @param chartId Id of chart which the item belongs to
   * @param uniqueId Id of the item to return
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getChartItem(chartId: string, uniqueId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JsonChartItemViewModel>): void;
  getChartItem(chartId: string, uniqueId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JsonChartItemViewModel>, callback?: msRest.ServiceCallback<Models.JsonChartItemViewModel>): Promise<Models.ChartDataApiGetChartItemResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        uniqueId,
        version,
        options
      },
      getChartItemOperationSpec,
      callback) as Promise<Models.ChartDataApiGetChartItemResponse>;
  }

  /**
   * <b>Please note</b> Only charts created via the API or by uploading a spreadsheet are supported
   * in this version of the API.<br />
   * Sample request:
   *
   * GET /api/v1/data/chartview/53bec490-1cdc-42f5-8983-e6efe66dc685
   * @summary Fetches chart data in a hierarchical view.
   * @param chartId Id of chart
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.ChartDataApiGetChartViewResponse>
   */
  getChartView(chartId: string, version: string, options?: Models.ChartDataApiGetChartViewOptionalParams): Promise<Models.ChartDataApiGetChartViewResponse>;
  /**
   * @param chartId Id of chart
   * @param version
   * @param callback The callback
   */
  getChartView(chartId: string, version: string, callback: msRest.ServiceCallback<Models.ChartDataView>): void;
  /**
   * @param chartId Id of chart
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getChartView(chartId: string, version: string, options: Models.ChartDataApiGetChartViewOptionalParams, callback: msRest.ServiceCallback<Models.ChartDataView>): void;
  getChartView(chartId: string, version: string, options?: Models.ChartDataApiGetChartViewOptionalParams | msRest.ServiceCallback<Models.ChartDataView>, callback?: msRest.ServiceCallback<Models.ChartDataView>): Promise<Models.ChartDataApiGetChartViewResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        version,
        options
      },
      getChartViewOperationSpec,
      callback) as Promise<Models.ChartDataApiGetChartViewResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getChartItemsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/data/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JsonChartItemViewModel"
            }
          }
        }
      }
    },
    400: {},
    default: {}
  },
  serializer
};

const createChartItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v{version}/data/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      required: true,
      serializedName: "model",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.JsonChartItemViewModel
    },
    default: {}
  },
  serializer
};

const deleteChartItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v{version}/data/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  queryParameters: [
    Parameters.uniqueId
  ],
  responses: {
    200: {},
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const createChartItemsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v{version}/data/{chartId}/bulk",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  requestBody: {
    parameterPath: "items",
    mapper: {
      required: true,
      serializedName: "items",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JsonChartItemViewModel"
            }
          }
        }
      }
    },
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const getChartItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/data/{chartId}/item",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  queryParameters: [
    Parameters.uniqueId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JsonChartItemViewModel
    },
    400: {},
    default: {}
  },
  serializer
};

const getChartViewOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/data/chartview/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  queryParameters: [
    Parameters.startValue,
    Parameters.depth
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChartDataView
    },
    default: {}
  },
  serializer
};
