/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/remappingsApiMappers";
import * as Parameters from "../models/parameters";
import { TeamOrgChartApiContext } from "../teamOrgChartApiContext";

/** Class representing a RemappingsApi. */
export class RemappingsApi {
  private readonly client: TeamOrgChartApiContext;

  /**
   * Create a RemappingsApi.
   * @param {TeamOrgChartApiContext} client Reference to the service client.
   */
  constructor(client: TeamOrgChartApiContext) {
    this.client = client;
  }

  /**
   * Sample request:
   *
   * GET /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
   * @summary Returns a list of the temporary, vacant or department chart positions defined for the
   * chart
   * @param chartId ID of the chart definition
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.RemappingsApiGetRemappingsResponse>
   */
  getRemappings(chartId: string, version: string, options?: msRest.RequestOptionsBase): Promise<Models.RemappingsApiGetRemappingsResponse>;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param callback The callback
   */
  getRemappings(chartId: string, version: string, callback: msRest.ServiceCallback<Models.Remapping[]>): void;
  /**
   * @param chartId ID of the chart definition
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  getRemappings(chartId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remapping[]>): void;
  getRemappings(chartId: string, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remapping[]>, callback?: msRest.ServiceCallback<Models.Remapping[]>): Promise<Models.RemappingsApiGetRemappingsResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        version,
        options
      },
      getRemappingsOperationSpec,
      callback) as Promise<Models.RemappingsApiGetRemappingsResponse>;
  }

  /**
   * Sample request:
   *
   * POST /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685
   * [{
   * "Id": 0,
   * "UniqueId": "string",
   * "FriendlyUniqueId": "string",
   * "ManagerId": "string",
   * "FriendlyManagerId": "string",
   * "MappedId": "string",
   * "FriendlyMappedId": "string"
   * }]
   * @summary Creates a new or updates an existing remapping in the chart.
   * @param chartId ID of the chart definition
   * @param model Remapping model
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<Models.RemappingsApiAddRemappingResponse>
   */
  addRemapping(chartId: string, model: Models.Remapping, version: string, options?: msRest.RequestOptionsBase): Promise<Models.RemappingsApiAddRemappingResponse>;
  /**
   * @param chartId ID of the chart definition
   * @param model Remapping model
   * @param version
   * @param callback The callback
   */
  addRemapping(chartId: string, model: Models.Remapping, version: string, callback: msRest.ServiceCallback<Models.Remapping>): void;
  /**
   * @param chartId ID of the chart definition
   * @param model Remapping model
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  addRemapping(chartId: string, model: Models.Remapping, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remapping>): void;
  addRemapping(chartId: string, model: Models.Remapping, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remapping>, callback?: msRest.ServiceCallback<Models.Remapping>): Promise<Models.RemappingsApiAddRemappingResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        model,
        version,
        options
      },
      addRemappingOperationSpec,
      callback) as Promise<Models.RemappingsApiAddRemappingResponse>;
  }

  /**
   * Sample request:
   *
   * DELETE /api/v1/remappings/53bec490-1cdc-42f5-8983-e6efe66dc685/123456
   * @summary Removes a remapping from the chart.
   * @param chartId ID of the chart definition
   * @param remappingId ID of the mapping
   * @param version
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRemapping(chartId: string, remappingId: number, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param chartId ID of the chart definition
   * @param remappingId ID of the mapping
   * @param version
   * @param callback The callback
   */
  deleteRemapping(chartId: string, remappingId: number, version: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param chartId ID of the chart definition
   * @param remappingId ID of the mapping
   * @param version
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRemapping(chartId: string, remappingId: number, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRemapping(chartId: string, remappingId: number, version: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        chartId,
        remappingId,
        version,
        options
      },
      deleteRemappingOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getRemappingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v{version}/remappings/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Remapping"
            }
          }
        }
      }
    },
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const addRemappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v{version}/remappings/{chartId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.version
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Remapping,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Remapping
    },
    400: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteRemappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v{version}/remappings/{chartId}/{remappingId}",
  urlParameters: [
    Parameters.chartId,
    Parameters.remappingId,
    Parameters.version
  ],
  responses: {
    200: {},
    400: {},
    404: {},
    default: {}
  },
  serializer
};
